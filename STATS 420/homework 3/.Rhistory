#solution
epsilon = rnorm (mean = 0, sd = s)
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = s)
y = - 3 + (2.5 * x) + epsilon
conditional =  - 3 + (2.5 * x)
}
expected_value (10,5)
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = 4)
y = - 3 + (2.5 * x) + epsilon
conditional =  - 3 + (2.5 * x)
}
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = 2)
y = - 3 + (2.5 * x) + epsilon
conditional =  - 3 + (2.5 * x)
}
expected_value (10,5)
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = 2)
y = - 3 + (2.5 * x) + epsilon
conditional =  - 3 + (2.5 * x)
return conditional
}
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = 2)
y = - 3 + (2.5 * x) + epsilon
conditional =  - 3 + (2.5 * x)
print (conditional)
}
expected_value (10,5)
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = 2)
y = - 3 + (2.5 * x) + epsilon
print (y)
conditional =  - 3 + (2.5 * x)
print (conditional)
}
expected_value (10,5)
#solution
?trees
#solution
head(trees)
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
abline (slr)
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
slr
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
plot (trees$Girth ~ trees$Height, data = trees)
grid()
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
slr
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
slr[1]
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
slr[[1]]
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
summary(slr)
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
slr
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
slr$coefficients[1]
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
#solution
names(summary(slr))
slr$r.squared
#solution
names(summary(slr))
summary(slr)$r.squared
#solution
qs6 = function (n, b0, b1, x, sigma){
eps = rnorm (n, mean = 0, sd = 4)
y = b0 + b1*X + eps
data.frame (x,y)
}
qs6 (6,10,5,0,4)
#solution
qs6 = function (n, b0, b1, x, sigma){
eps = rnorm (n, mean = 0, sd = sigma)
y = b0 + b1*x + eps
data.frame (x,y)
}
qs6 (6,10,5,0,4)
qs6 (6,10,5,0,4)
plot (y ~ x)
qs6 (6,10,5,0,4)
plot (y ~ x, data = qs6)
plot (y ~ x, data = qs6 (6,10,5,0,4))
a = qs6 (6,10,5,0,4)
model = lm (y ~ x, data = a)
plot (y ~ x, data = a )
abline(model)
a = qs6 (6,10,5,0,4)
model = lm (y ~ x, data = a)
plot (y ~ x, data = a )
a = qs6 (6,10,5,0,4)
model = lm (y ~ x, data = a)
summary(model)
plot (y ~ x, data = a )
#solution
?faithful
head(faithful)
model = lm (faithful$eruptions ~ faithful$waiting)
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
summary (model)
pred_eruption = predict( model, faithful$waiting = 80 )
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
summary (model)
pred_eruption = predict( model, data.frame(faithful$waiting = 80))
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
summary (model)
predict( model, data.frame(faithful$waiting = 80))
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
predict(model, data.frame(faithful$waiting = 80))
#solution
?faithful
head(faithful)
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
predict(model, data.frame(faithful$waiting = 80))
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
predict(model, data.frame(waiting = 80))
#solution
?faithful
head(faithful)
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = green, xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions")
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = "green", xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions")
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = "green", xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions", pch = 20)
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = "green", xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions", pch = 20)
grid()
abline(model)
#solution
k=length(model$coefficients)-1
SSE=sum(model$residuals**2)
n=length(model$residuals)
sqrt(SSE/(n-(1+k)))
#solution
summary(model)
k=length(model$coefficients)-1
SSE=sum(model$residuals**2)
n=length(model$residuals)
sqrt(SSE/(n-(1+k)))
#solution
model$residuals
k=length(model$coefficients)-1
SSE=sum(model$residuals**2)
n=length(model$residuals)
sqrt(SSE/(n-(1+k)))
#solution
k=length(model$coefficients)-1
SSE=sum(model$residuals**2)
n=length(model$residuals)
sqrt(SSE/(n-(1+k)))
#solution
summary(model)
#solution
name(summary(model))
#solution
names(summary(model))
#solution
summary(model)$r.squared
?rnorm
#solution
x=0
sigma=4
mu=10+5*x
pnorm(6,mu,sigma)
#solution
expected_value = function (n, x){
epsilon = rnorm (n = n, mean = 0, sd = 2)
y = - 3 + (2.5 * x) + epsilon
conditional =  - 3 + (2.5 * x)
print (conditional)
}
expected_value (10,5)
#solution
x=-1
sigma=4
mu=10+5*x
pnorm(3,mu,sigma, lower.tail = FALSE)
x=10
y = -1.5 + 2.3 * x
x=10
y = -1.5 + 2.3 * x
y
x=10
y = -1.5 + 2.3 * x
x1=10
y1 = -1.5 + 2.3 * x1
y-y1
x=10
y = -1.5 + 2.3 * x
x1=9
y1 = -1.5 + 2.3 * x1
y-y1
#solution
#head(trees)
slr = lm (trees$Girth ~ trees$Height, data = trees)
slr$coefficients[2]
plot (trees$Girth ~ trees$Height, data = trees)
grid()
abline(slr)
#solution
names(summary(slr))
summary(slr)$r.squared
#solution
x=0
sigma=4
mu=10+5*x
pnorm(6,mu,sigma)
#solution
x=-1
sigma=4
mu=10+5*x
pnorm(3,mu,sigma, lower.tail = FALSE)
#solution
?faithful
head(faithful)
model = lm (faithful$eruptions ~ faithful$waiting, data = faithful)
predict(model, data.frame(waiting = 80))
model = lm (eruptions ~ waiting, data = faithful)
predict(model, data.frame(waiting = 80))
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = "green", xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions", pch = 20)
grid()
abline(model)
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = "green", xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions", pch = 20)
grid()
abline(model , led = 2, col= "yellow")
#solution
plot (faithful$eruptions ~ faithful$waiting, data = faithful, lwd = 3, col = "green", xlab = "waiting", ylab = "eruptions", main= "waiting vs eruptions", pch = 20)
grid()
abline(model , lwd = 2, col= "yellow")
#solution
summary(model)$r.squared
#solution
k=length(model$coefficients)-1
SSE=sum(model$residuals**2)
n=length(model$residuals)
sqrt(SSE/(n-(1+k)))
#solution
sd(model_faith$residuals)
#solution
sd(model$residuals)
